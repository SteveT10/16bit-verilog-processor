# Reading pref.tcl
# OpenFile C:/Users/Steven/Documents/GitHub/TCES330_Project/Datapath/Datapath.sv
do runDatapath.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./Datapath.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 15:42:15 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Datapath.sv 
# -- Compiling module Datapath
# -- Compiling module Datapath_tb
# 
# Top level modules:
# 	Datapath_tb
# End time: 15:42:15 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Mux_16w_2to1.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 15:42:15 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Mux_16w_2to1.sv 
# -- Compiling module Mux_16w_2to1
# -- Compiling module Mux_16w_2to1_tb
# 
# Top level modules:
# 	Mux_16w_2to1_tb
# End time: 15:42:15 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./regfile16x16a.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 15:42:15 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./regfile16x16a.sv 
# -- Compiling module regfile16x16a
# -- Compiling module regfile16x16a_tb
# 
# Top level modules:
# 	regfile16x16a_tb
# End time: 15:42:15 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ALU.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 15:42:15 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./ALU.sv 
# -- Compiling module ALU
# -- Compiling module ALU_tb
# 
# Top level modules:
# 	ALU_tb
# End time: 15:42:16 on Jun 03,2023, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# vlog -work work +acc "./DataMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 15:42:16 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./DataMemory.v 
# -- Compiling module DataMemory
# 
# Top level modules:
# 	DataMemory
# End time: 15:42:16 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  Datapath_tb
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug Datapath_tb 
# Start time: 15:42:16 on Jun 03,2023
# Loading sv_std.std
# Loading work.Datapath_tb
# Loading work.Datapath
# Loading work.regfile16x16a
# Loading work.DataMemory
# Loading altera_mf_ver.altsyncram
# Loading work.Mux_16w_2to1
# Loading work.ALU
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do datapath_wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /Datapath_tb/clk
# ** Warning: (vsim-WLF-5000) WLF file currently in use: vsim.wlf
#           File in use by: steve  Hostname: STEVE_LAPTOP  ProcessID: 40876
#           Attempting to use alternate WLF file "./wlftsgzszc".
# ** Warning: (vsim-WLF-5001) Could not open WLF file: vsim.wlf
#           Using alternate file: ./wlftsgzszc
# add wave -noupdate /Datapath_tb/IR
# add wave -noupdate /Datapath_tb/rdAddrA
# add wave -noupdate /Datapath_tb/rdAddrB
# add wave -noupdate /Datapath_tb/WriteAddr
# add wave -noupdate /Datapath_tb/D_addr
# add wave -noupdate /Datapath_tb/D_wr
# add wave -noupdate /Datapath_tb/RF_sel
# add wave -noupdate /Datapath_tb/RF_W_en
# add wave -noupdate /Datapath_tb/ALU_s0
# add wave -noupdate /Datapath_tb/ALU_A_out
# add wave -noupdate /Datapath_tb/ALU_B_out
# add wave -noupdate /Datapath_tb/ALUout
# add wave -noupdate /Datapath_tb/DUT.Wr_Data
# add wave -noupdate /Datapath_tb/DUT.Data_to_Mux
# 
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
#                    5 LOAD (A) 1111 in REG 1: 
#                    5   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 0
#                   20   NEGCLK: Load into REG 1 A | IR: 000000010001 | DataToMux: 0001000100010001 | write: 0 | wr data: 0001000100010001
#                   25 LOAD (B) 1111 in REG 1: 
#                   25   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 1
#                   40   NEGCLK: Load into REG 1 A | IR: 000000010001 | DataToMux: 0001000100010001 | write: 1 | wr data: 0001000100010001
#                   40   LOAD_1111 PASSED 
# 
#                   45 Store Operation 
#                   45   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 1 | RF_wrEn: 0
#                   60   NEGCLK: IR: 000101101010 | Wr Addr: 1010 
#                   60   STORE PASSED 
# 
#                   65 LOAD (A) 2222 in REG 2: 
#                   65   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 0
#                   80   NEGCLK: Load 2222 into REG 2 A | IR: 000000100010 | DataToMux: 0010001000100010 | write: 0 | wr data: 0010001000100010
#                   85 LOAD (B) 2222 in REG 2: 
#                   85   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 1
#                  100   NEGCLK: IR: 000000100010 | DataToMux: 0010001000100010 | write: 1 | wr data: 0010001000100010
#                  100   LOAD_2222 PASSED 
# 
#                  105 Add 1 Operation 
#                  105   SELECT SIGNALS | ALU Sel: 001 | RF Sel: 0 | D_wr: 0 | RF_wrEn: 1
#                  120   NEGCLK: Add Operation: Wr Addr = 0011 | A Addr = 0001 | B Addr = 0010
#                  120   ADD 1 PASSED 
# 
#                  125 Add 2 Operation 
#                  140   NEGCLK: Add Operation: Wr Addr = 0100 | A Addr = 0010 | B Addr = 0011
#                  140   ADD 2 PASSED 
# 
#                  145 Sub 1 Operation 
#                  145   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 0 | D_wr: 0 | RF_wrEn: 1
#                  160   NEGCLK: Sub Operation: Wr Addr = 0000 | A Addr = 0010 | B Addr = 0001
#                  160   SUB PASSED 
# 
#                  165 EDGE CASE LOAD Operation 
#                  165   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 1 | D_wr: 0 | RF_wrEn: 0
#                  180   NEGCLK: Load into REG 1 A | IR: 111111111111 | DataToMux: 1111111111111111 | write: 0 | wr data: 1111111111111111
#                  185   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 1 | D_wr: 0 | RF_wrEn: 1
#                  200   NEGCLK: Load into REG 1 A | IR: 111111111111 | DataToMux: 1111111111111111 | write: 1 | wr data: 1111111111111111
#                  200   EDGE CASE LOAD PASSED 
# 
#                  205 EDGE CASE Store Operation 
#                  205   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 1 | D_wr: 1 | RF_wrEn: 0
#                  220   NEGCLK: IR: 111111111110 | Wr Addr: 1110 
#                  220   EDGE CASE STORE PASSED 
# 
#                  225 NO-OP Operation 
#                  225   SELECT SIGNALS | ALU Sel: 000 | RF Sel: 0 | D_wr: 0 | RF_wrEn: 0
#                  240   NEGCLK: IR: 111111111110 | Data Addr: 11111110 | A Addr: 1111
#                  245   NO-OP PASSED
# ** Note: $stop    : ./Datapath.sv(244)
#    Time: 245 ns  Iteration: 0  Instance: /Datapath_tb
# Break in Module Datapath_tb at ./Datapath.sv line 244
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 257250 ps
# 
# End
quit -sim
# End time: 16:01:43 on Jun 03,2023, Elapsed time: 0:19:27
# Errors: 0, Warnings: 2
cd C:/Users/Steven/Documents/GitHub/TCES330_Project/Processor
# reading modelsim.ini
do runrtlROM.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./InstructionMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:02:11 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./InstructionMemory.v 
# -- Compiling module InstructionMemory
# 
# Top level modules:
# 	InstructionMemory
# End time: 16:02:11 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./IR.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:02:11 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./IR.sv 
# -- Compiling module IR
# -- Compiling module IR_tb
# 
# Top level modules:
# 	IR_tb
# End time: 16:02:12 on Jun 03,2023, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# vlog -work work +acc "./FSM.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:02:12 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./FSM.sv 
# -- Compiling module FSM
# -- Compiling module FSM_tb
# 
# Top level modules:
# 	FSM_tb
# End time: 16:02:12 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./PC.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:02:12 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./PC.sv 
# -- Compiling module PC
# -- Compiling module PC_tb
# 
# Top level modules:
# 	PC_tb
# End time: 16:02:12 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ControlUnit.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:02:12 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./ControlUnit.sv 
# -- Compiling module ControlUnit
# -- Compiling module ControlUnit_tb
# 
# Top level modules:
# 	ControlUnit_tb
# End time: 16:02:12 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Datapath.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:02:12 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Datapath.sv 
# -- Compiling module Datapath
# -- Compiling module Datapath_tb
# 
# Top level modules:
# 	Datapath_tb
# End time: 16:02:12 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Mux_16w_2to1.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:02:12 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Mux_16w_2to1.sv 
# -- Compiling module Mux_16w_2to1
# -- Compiling module Mux_16w_2to1_tb
# 
# Top level modules:
# 	Mux_16w_2to1_tb
# End time: 16:02:12 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./regfile16x16a.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:02:12 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./regfile16x16a.sv 
# -- Compiling module regfile16x16a
# -- Compiling module regfile16x16a_tb
# 
# Top level modules:
# 	regfile16x16a_tb
# End time: 16:02:12 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ALU.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:02:12 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./ALU.sv 
# -- Compiling module ALU
# -- Compiling module ALU_tb
# 
# Top level modules:
# 	ALU_tb
# End time: 16:02:12 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./DataMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:02:12 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./DataMemory.v 
# -- Compiling module DataMemory
# 
# Top level modules:
# 	DataMemory
# End time: 16:02:12 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Processor.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:02:12 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Processor.sv 
# -- Compiling module Processor
# 
# Top level modules:
# 	Processor
# End time: 16:02:12 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./testProcessor.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:02:12 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./testProcessor.sv 
# -- Compiling module testProcessor
# 
# Top level modules:
# 	testProcessor
# End time: 16:02:12 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  testProcessor
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug testProcessor 
# Start time: 16:02:12 on Jun 03,2023
# Loading sv_std.std
# Loading work.testProcessor
# Loading work.Processor
# Loading work.ControlUnit
# Loading work.InstructionMemory
# Loading altera_mf_ver.altsyncram
# Loading work.IR
# Loading work.FSM
# Loading work.PC
# Loading work.Datapath
# Loading work.regfile16x16a
# Loading work.DataMemory
# Loading work.Mux_16w_2to1
# Loading work.ALU
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /testProcessor/Clk
# ** Warning: (vsim-WLF-5000) WLF file currently in use: vsim.wlf
#           File in use by: steve  Hostname: STEVE_LAPTOP  ProcessID: 40876
#           Attempting to use alternate WLF file "./wlfty9ixcr".
# ** Warning: (vsim-WLF-5001) Could not open WLF file: vsim.wlf
#           Using alternate file: ./wlfty9ixcr
# add wave -noupdate /testProcessor/Reset
# add wave -noupdate /testProcessor/IR_Out
# add wave -noupdate /testProcessor/PC_Out
# add wave -noupdate /testProcessor/State
# add wave -noupdate /testProcessor/nextState
# ** UI-Msg: (vish-4014) No objects found matching '/testProcessor/nextState'.
# Executing ONERROR command at macro ./wave.do line 8
# add wave -noupdate /testProcessor/ALU_A
# add wave -noupdate /testProcessor/ALU_B
# add wave -noupdate /testProcessor/ALU_Out
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
# 
# Begin Simulation.
# Time is 0 : Reset = 0   PC_Out = xx   IR_Out = xxxx  State = x  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 10000 : Reset = 0   PC_Out = xx   IR_Out = xxxx  State = 0  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 30000 : Reset = 0   PC_Out = 00   IR_Out = xxxx  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 40000 : Reset = 1   PC_Out = 00   IR_Out = xxxx  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 50000 : Reset = 1   PC_Out = 01   IR_Out = xxxx  State = 0  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 70000 : Reset = 1   PC_Out = 00   IR_Out = xxxx  State = 0  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Break key hit
# Break in Module FSM at ./FSM.sv line 109
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 50115544500 ps
# 
# End
do runrtlROM.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# Error 31: Unable to unlink file "C:/Users/Steven/Documents/GitHub/TCES330_Project/Processor/rtl_work/_lib.qdb".
# Error 133: Unable to remove directory "C:/Users/Steven/Documents/GitHub/TCES330_Project/Processor/rtl_work".
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./InstructionMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:04:49 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./InstructionMemory.v 
# -- Compiling module InstructionMemory
# 
# Top level modules:
# 	InstructionMemory
# End time: 16:04:49 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./IR.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:04:49 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./IR.sv 
# -- Compiling module IR
# -- Compiling module IR_tb
# 
# Top level modules:
# 	IR_tb
# End time: 16:04:49 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./FSM.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:04:49 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./FSM.sv 
# -- Compiling module FSM
# -- Compiling module FSM_tb
# 
# Top level modules:
# 	FSM_tb
# End time: 16:04:49 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./PC.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:04:49 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./PC.sv 
# -- Compiling module PC
# -- Compiling module PC_tb
# 
# Top level modules:
# 	PC_tb
# End time: 16:04:49 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ControlUnit.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:04:49 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./ControlUnit.sv 
# -- Compiling module ControlUnit
# -- Compiling module ControlUnit_tb
# 
# Top level modules:
# 	ControlUnit_tb
# End time: 16:04:49 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Datapath.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:04:49 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Datapath.sv 
# -- Compiling module Datapath
# -- Compiling module Datapath_tb
# 
# Top level modules:
# 	Datapath_tb
# End time: 16:04:49 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Mux_16w_2to1.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:04:49 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Mux_16w_2to1.sv 
# -- Compiling module Mux_16w_2to1
# -- Compiling module Mux_16w_2to1_tb
# 
# Top level modules:
# 	Mux_16w_2to1_tb
# End time: 16:04:49 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./regfile16x16a.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:04:49 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./regfile16x16a.sv 
# -- Compiling module regfile16x16a
# -- Compiling module regfile16x16a_tb
# 
# Top level modules:
# 	regfile16x16a_tb
# End time: 16:04:49 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ALU.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:04:49 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./ALU.sv 
# -- Compiling module ALU
# -- Compiling module ALU_tb
# 
# Top level modules:
# 	ALU_tb
# End time: 16:04:49 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./DataMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:04:49 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./DataMemory.v 
# -- Compiling module DataMemory
# 
# Top level modules:
# 	DataMemory
# End time: 16:04:49 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Processor.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:04:49 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Processor.sv 
# -- Compiling module Processor
# 
# Top level modules:
# 	Processor
# End time: 16:04:49 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./testProcessor.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:04:49 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./testProcessor.sv 
# -- Compiling module testProcessor
# 
# Top level modules:
# 	testProcessor
# End time: 16:04:49 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  testProcessor
# End time: 16:04:53 on Jun 03,2023, Elapsed time: 0:02:41
# Errors: 0, Warnings: 2
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug testProcessor 
# Start time: 16:04:53 on Jun 03,2023
# Loading sv_std.std
# Loading work.testProcessor
# Loading work.Processor
# Loading work.ControlUnit
# Loading work.InstructionMemory
# Loading altera_mf_ver.altsyncram
# Loading work.IR
# Loading work.FSM
# Loading work.PC
# Loading work.Datapath
# Loading work.regfile16x16a
# Loading work.DataMemory
# Loading work.Mux_16w_2to1
# Loading work.ALU
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /testProcessor/Clk
# ** Warning: (vsim-WLF-5000) WLF file currently in use: vsim.wlf
#           File in use by: steve  Hostname: STEVE_LAPTOP  ProcessID: 40876
#           Attempting to use alternate WLF file "./wlftf96mxs".
# ** Warning: (vsim-WLF-5001) Could not open WLF file: vsim.wlf
#           Using alternate file: ./wlftf96mxs
# add wave -noupdate /testProcessor/Reset
# add wave -noupdate /testProcessor/IR_Out
# add wave -noupdate /testProcessor/PC_Out
# add wave -noupdate /testProcessor/State
# add wave -noupdate /testProcessor/nextState
# ** UI-Msg: (vish-4014) No objects found matching '/testProcessor/nextState'.
# Executing ONERROR command at macro ./wave.do line 8
# add wave -noupdate /testProcessor/ALU_A
# add wave -noupdate /testProcessor/ALU_B
# add wave -noupdate /testProcessor/ALU_Out
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
# 
# Begin Simulation.
# Time is 0 : Reset = 0   PC_Out = xx   IR_Out = xxxx  State = x  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 10000 : Reset = 0   PC_Out = xx   IR_Out = xxxx  State = 0  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 20000 : Reset = 1   PC_Out = xx   IR_Out = xxxx  State = 0  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 30000 : Reset = 1   PC_Out = 00   IR_Out = xxxx  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 50000 : Reset = 1   PC_Out = 01   IR_Out = xxxx  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 70000 : Reset = 1   PC_Out = 01   IR_Out = xxxx  State = 3  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 90000 : Reset = 1   PC_Out = 01   IR_Out = xxxx  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 110000 : Reset = 1   PC_Out = 02   IR_Out = 4abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 130000 : Reset = 1   PC_Out = 02   IR_Out = 4abc  State = 9  ALU A = xxxx  ALU B = xxxx ALU Out = xxxx
# Time is 150000 : Reset = 1   PC_Out = 02   IR_Out = 4abc  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 170000 : Reset = 1   PC_Out = 03   IR_Out = 2abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 190000 : Reset = 1   PC_Out = 03   IR_Out = 2abc  State = 4  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 210000 : Reset = 1   PC_Out = 03   IR_Out = 2abc  State = 5  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 230000 : Reset = 1   PC_Out = 03   IR_Out = 2abc  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 250000 : Reset = 1   PC_Out = 04   IR_Out = 1abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 270000 : Reset = 1   PC_Out = 04   IR_Out = 1abc  State = 6  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 290000 : Reset = 1   PC_Out = 04   IR_Out = 1abc  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 310000 : Reset = 1   PC_Out = 05   IR_Out = 0abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 330000 : Reset = 1   PC_Out = 05   IR_Out = 0abc  State = 3  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 350000 : Reset = 1   PC_Out = 05   IR_Out = 0abc  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 370000 : Reset = 1   PC_Out = 06   IR_Out = 5abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 390000 : Reset = 1   PC_Out = 06   IR_Out = 5abc  State = 8  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Break key hit
# Simulation stop requested.
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 2485642782 ns
# 
# End
quit -sim
# End time: 16:19:27 on Jun 03,2023, Elapsed time: 0:14:34
# Errors: 0, Warnings: 2
cd C:/Users/Steven/Documents/GitHub/TCES330_Project/Datapath
# reading modelsim.ini
do runDatapath.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./Datapath.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:20:38 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Datapath.sv 
# -- Compiling module Datapath
# -- Compiling module Datapath_tb
# 
# Top level modules:
# 	Datapath_tb
# End time: 16:20:38 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Mux_16w_2to1.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:20:38 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Mux_16w_2to1.sv 
# -- Compiling module Mux_16w_2to1
# -- Compiling module Mux_16w_2to1_tb
# 
# Top level modules:
# 	Mux_16w_2to1_tb
# End time: 16:20:38 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./regfile16x16a.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:20:39 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./regfile16x16a.sv 
# -- Compiling module regfile16x16a
# -- Compiling module regfile16x16a_tb
# 
# Top level modules:
# 	regfile16x16a_tb
# End time: 16:20:39 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ALU.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:20:39 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./ALU.sv 
# -- Compiling module ALU
# -- Compiling module ALU_tb
# 
# Top level modules:
# 	ALU_tb
# End time: 16:20:39 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./DataMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:20:39 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./DataMemory.v 
# -- Compiling module DataMemory
# 
# Top level modules:
# 	DataMemory
# End time: 16:20:39 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  Datapath_tb
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug Datapath_tb 
# Start time: 16:20:39 on Jun 03,2023
# Loading sv_std.std
# Loading work.Datapath_tb
# Loading work.Datapath
# Loading work.regfile16x16a
# Loading work.DataMemory
# Loading altera_mf_ver.altsyncram
# Loading work.Mux_16w_2to1
# Loading work.ALU
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do datapath_wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /Datapath_tb/clk
# ** Warning: (vsim-WLF-5000) WLF file currently in use: vsim.wlf
#           File in use by: steve  Hostname: STEVE_LAPTOP  ProcessID: 40876
#           Attempting to use alternate WLF file "./wlft51bbkx".
# ** Warning: (vsim-WLF-5001) Could not open WLF file: vsim.wlf
#           Using alternate file: ./wlft51bbkx
# add wave -noupdate /Datapath_tb/IR
# add wave -noupdate /Datapath_tb/rdAddrA
# add wave -noupdate /Datapath_tb/rdAddrB
# add wave -noupdate /Datapath_tb/WriteAddr
# add wave -noupdate /Datapath_tb/D_addr
# add wave -noupdate /Datapath_tb/D_wr
# add wave -noupdate /Datapath_tb/RF_sel
# add wave -noupdate /Datapath_tb/RF_W_en
# add wave -noupdate /Datapath_tb/ALU_s0
# add wave -noupdate /Datapath_tb/ALU_A_out
# add wave -noupdate /Datapath_tb/ALU_B_out
# add wave -noupdate /Datapath_tb/ALUout
# add wave -noupdate /Datapath_tb/DUT.Wr_Data
# add wave -noupdate /Datapath_tb/DUT.Data_to_Mux
# 
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
#                    5 LOAD (A) 1111 in REG 1: 
#                    5   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 0
#                   20   NEGCLK: Load into REG 1 A | IR: 000000010001 | DataToMux: 0001000100010001 | write: 0 | wr data: 0001000100010001
#                   25 LOAD (B) 1111 in REG 1: 
#                   25   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 1
#                   40   NEGCLK: Load into REG 1 A | IR: 000000010001 | DataToMux: 0001000100010001 | write: 1 | wr data: 0001000100010001
#                   40   LOAD_1111 PASSED 
# 
#                   45 Store Operation 
#                   45   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 1 | RF_wrEn: 0
#                   60   NEGCLK: IR: 000101101010 | Wr Addr: 1010 
#                   60   STORE PASSED 
# 
#                   65 LOAD (A) 2222 in REG 2: 
#                   65   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 0
#                   80   NEGCLK: Load 2222 into REG 2 A | IR: 000000100010 | DataToMux: 0010001000100010 | write: 0 | wr data: 0010001000100010
#                   85 LOAD (B) 2222 in REG 2: 
#                   85   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 1
#                  100   NEGCLK: IR: 000000100010 | DataToMux: 0010001000100010 | write: 1 | wr data: 0010001000100010
#                  100   LOAD_2222 PASSED 
# 
#                  105 Add 1 Operation 
#                  105   SELECT SIGNALS | ALU Sel: 001 | RF Sel: 0 | D_wr: 0 | RF_wrEn: 1
#                  120   NEGCLK: Add Operation: Wr Addr = 0011 | A Addr = 0001 | B Addr = 0010
#                  120   ADD 1 PASSED 
# 
#                  125 Add 2 Operation 
#                  140   NEGCLK: Add Operation: Wr Addr = 0100 | A Addr = 0010 | B Addr = 0011
#                  140   ADD 2 PASSED 
# 
#                  145 Sub 1 Operation 
#                  145   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 0 | D_wr: 0 | RF_wrEn: 1
#                  160   NEGCLK: Sub Operation: Wr Addr = 0000 | A Addr = 0010 | B Addr = 0001
#                  160   SUB PASSED 
# 
#                  165 EDGE CASE LOAD Operation 
#                  165   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 1 | D_wr: 0 | RF_wrEn: 0
#                  180   NEGCLK: Load into REG 1 A | IR: 111111111111 | DataToMux: 1111111111111111 | write: 0 | wr data: 1111111111111111
#                  185   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 1 | D_wr: 0 | RF_wrEn: 1
#                  200   NEGCLK: Load into REG 1 A | IR: 111111111111 | DataToMux: 1111111111111111 | write: 1 | wr data: 1111111111111111
#                  200   EDGE CASE LOAD PASSED 
# 
#                  205 EDGE CASE Store Operation 
#                  205   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 1 | D_wr: 1 | RF_wrEn: 0
#                  220   NEGCLK: IR: 111111111110 | Wr Addr: 1110 
#                  220   EDGE CASE STORE PASSED 
# 
#                  225 NO-OP Operation 
#                  225   SELECT SIGNALS | ALU Sel: 000 | RF Sel: 0 | D_wr: 0 | RF_wrEn: 0
#                  240   NEGCLK: IR: 111111111110 | Data Addr: 11111110 | A Addr: 1111
#                  245   NO-OP PASSED
# ** Note: $stop    : ./Datapath.sv(244)
#    Time: 245 ns  Iteration: 0  Instance: /Datapath_tb
# Break in Module Datapath_tb at ./Datapath.sv line 244
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 257250 ps
# 
# End
do runDatapath.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# Error 31: Unable to unlink file "C:/Users/Steven/Documents/GitHub/TCES330_Project/Datapath/rtl_work/_lib.qdb".
# Error 133: Unable to remove directory "C:/Users/Steven/Documents/GitHub/TCES330_Project/Datapath/rtl_work".
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./Datapath.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:21:50 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Datapath.sv 
# -- Compiling module Datapath
# -- Compiling module Datapath_tb
# 
# Top level modules:
# 	Datapath_tb
# End time: 16:21:50 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Mux_16w_2to1.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:21:50 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Mux_16w_2to1.sv 
# -- Compiling module Mux_16w_2to1
# -- Compiling module Mux_16w_2to1_tb
# 
# Top level modules:
# 	Mux_16w_2to1_tb
# End time: 16:21:50 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./regfile16x16a.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:21:50 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./regfile16x16a.sv 
# -- Compiling module regfile16x16a
# -- Compiling module regfile16x16a_tb
# 
# Top level modules:
# 	regfile16x16a_tb
# End time: 16:21:50 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ALU.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:21:50 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./ALU.sv 
# -- Compiling module ALU
# -- Compiling module ALU_tb
# 
# Top level modules:
# 	ALU_tb
# End time: 16:21:50 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./DataMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:21:50 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./DataMemory.v 
# -- Compiling module DataMemory
# 
# Top level modules:
# 	DataMemory
# End time: 16:21:50 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  Datapath_tb
# End time: 16:21:52 on Jun 03,2023, Elapsed time: 0:01:13
# Errors: 0, Warnings: 2
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug Datapath_tb 
# Start time: 16:21:52 on Jun 03,2023
# Loading sv_std.std
# Loading work.Datapath_tb
# Loading work.Datapath
# Loading work.regfile16x16a
# Loading work.DataMemory
# Loading altera_mf_ver.altsyncram
# Loading work.Mux_16w_2to1
# Loading work.ALU
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do datapath_wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /Datapath_tb/clk
# ** Warning: (vsim-WLF-5000) WLF file currently in use: vsim.wlf
#           File in use by: steve  Hostname: STEVE_LAPTOP  ProcessID: 40876
#           Attempting to use alternate WLF file "./wlftjzy9hf".
# ** Warning: (vsim-WLF-5001) Could not open WLF file: vsim.wlf
#           Using alternate file: ./wlftjzy9hf
# add wave -noupdate /Datapath_tb/IR
# add wave -noupdate /Datapath_tb/rdAddrA
# add wave -noupdate /Datapath_tb/rdAddrB
# add wave -noupdate /Datapath_tb/WriteAddr
# add wave -noupdate /Datapath_tb/D_addr
# add wave -noupdate /Datapath_tb/D_wr
# add wave -noupdate /Datapath_tb/RF_sel
# add wave -noupdate /Datapath_tb/RF_W_en
# add wave -noupdate /Datapath_tb/ALU_s0
# add wave -noupdate /Datapath_tb/ALU_A_out
# add wave -noupdate /Datapath_tb/DUT.Ra_Data
# ** UI-Msg: (vish-4014) No objects found matching '/Datapath_tb/DUT.Ra_Data'.
# Executing ONERROR command at macro ./datapath_wave.do line 14
# add wave -noupdate /Datapath_tb/ALU_B_out
# add wave -noupdate /Datapath_tb/DUT.Rb_Data
# ** UI-Msg: (vish-4014) No objects found matching '/Datapath_tb/DUT.Rb_Data'.
# Executing ONERROR command at macro ./datapath_wave.do line 16
# add wave -noupdate /Datapath_tb/ALUout
# add wave -noupdate /Datapath_tb/DUT.Wr_Data
# add wave -noupdate /Datapath_tb/DUT.Data_to_Mux
# 
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
#                    5 LOAD (A) 1111 in REG 1: 
#                    5   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 0
#                   20   NEGCLK: Load into REG 1 A | IR: 000000010001 | DataToMux: 0001000100010001 | write: 0 | wr data: 0001000100010001
#                   25 LOAD (B) 1111 in REG 1: 
#                   25   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 1
#                   40   NEGCLK: Load into REG 1 A | IR: 000000010001 | DataToMux: 0001000100010001 | write: 1 | wr data: 0001000100010001
#                   40   LOAD_1111 PASSED 
# 
#                   45 Store Operation 
#                   45   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 1 | RF_wrEn: 0
#                   60   NEGCLK: IR: 000101101010 | Wr Addr: 1010 
#                   60   STORE PASSED 
# 
#                   65 LOAD (A) 2222 in REG 2: 
#                   65   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 0
#                   80   NEGCLK: Load 2222 into REG 2 A | IR: 000000100010 | DataToMux: 0010001000100010 | write: 0 | wr data: 0010001000100010
#                   85 LOAD (B) 2222 in REG 2: 
#                   85   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 1
#                  100   NEGCLK: IR: 000000100010 | DataToMux: 0010001000100010 | write: 1 | wr data: 0010001000100010
#                  100   LOAD_2222 PASSED 
# 
#                  105 Add 1 Operation 
#                  105   SELECT SIGNALS | ALU Sel: 001 | RF Sel: 0 | D_wr: 0 | RF_wrEn: 1
#                  120   NEGCLK: Add Operation: Wr Addr = 0011 | A Addr = 0001 | B Addr = 0010
#                  120   ADD 1 PASSED 
# 
#                  125 Add 2 Operation 
#                  140   NEGCLK: Add Operation: Wr Addr = 0100 | A Addr = 0010 | B Addr = 0011
#                  140   ADD 2 PASSED 
# 
#                  145 Sub 1 Operation 
#                  145   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 0 | D_wr: 0 | RF_wrEn: 1
#                  160   NEGCLK: Sub Operation: Wr Addr = 0000 | A Addr = 0010 | B Addr = 0001
#                  160   SUB PASSED 
# 
#                  165 EDGE CASE LOAD Operation 
#                  165   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 1 | D_wr: 0 | RF_wrEn: 0
#                  180   NEGCLK: Load into REG 1 A | IR: 111111111111 | DataToMux: 1111111111111111 | write: 0 | wr data: 1111111111111111
#                  185   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 1 | D_wr: 0 | RF_wrEn: 1
#                  200   NEGCLK: Load into REG 1 A | IR: 111111111111 | DataToMux: 1111111111111111 | write: 1 | wr data: 1111111111111111
#                  200   EDGE CASE LOAD PASSED 
# 
#                  205 EDGE CASE Store Operation 
#                  205   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 1 | D_wr: 1 | RF_wrEn: 0
#                  220   NEGCLK: IR: 111111111110 | Wr Addr: 1110 
#                  220   EDGE CASE STORE PASSED 
# 
#                  225 NO-OP Operation 
#                  225   SELECT SIGNALS | ALU Sel: 000 | RF Sel: 0 | D_wr: 0 | RF_wrEn: 0
#                  240   NEGCLK: IR: 111111111110 | Data Addr: 11111110 | A Addr: 1111
#                  245   NO-OP PASSED
# ** Note: $stop    : ./Datapath.sv(244)
#    Time: 245 ns  Iteration: 0  Instance: /Datapath_tb
# Break in Module Datapath_tb at ./Datapath.sv line 244
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 257250 ps
# 
# End
quit -sim
# End time: 16:23:12 on Jun 03,2023, Elapsed time: 0:01:20
# Errors: 0, Warnings: 2
do runDatapath.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./Datapath.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:23:35 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Datapath.sv 
# -- Compiling module Datapath
# -- Compiling module Datapath_tb
# 
# Top level modules:
# 	Datapath_tb
# End time: 16:23:35 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Mux_16w_2to1.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:23:35 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Mux_16w_2to1.sv 
# -- Compiling module Mux_16w_2to1
# -- Compiling module Mux_16w_2to1_tb
# 
# Top level modules:
# 	Mux_16w_2to1_tb
# End time: 16:23:35 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./regfile16x16a.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:23:35 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./regfile16x16a.sv 
# -- Compiling module regfile16x16a
# -- Compiling module regfile16x16a_tb
# 
# Top level modules:
# 	regfile16x16a_tb
# End time: 16:23:35 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ALU.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:23:35 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./ALU.sv 
# -- Compiling module ALU
# -- Compiling module ALU_tb
# 
# Top level modules:
# 	ALU_tb
# End time: 16:23:35 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./DataMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:23:35 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./DataMemory.v 
# -- Compiling module DataMemory
# 
# Top level modules:
# 	DataMemory
# End time: 16:23:35 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  Datapath_tb
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug Datapath_tb 
# Start time: 16:23:35 on Jun 03,2023
# Loading sv_std.std
# Loading work.Datapath_tb
# Loading work.Datapath
# Loading work.regfile16x16a
# Loading work.DataMemory
# Loading altera_mf_ver.altsyncram
# Loading work.Mux_16w_2to1
# Loading work.ALU
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do datapath_wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /Datapath_tb/clk
# ** Warning: (vsim-WLF-5000) WLF file currently in use: vsim.wlf
#           File in use by: steve  Hostname: STEVE_LAPTOP  ProcessID: 40876
#           Attempting to use alternate WLF file "./wlftjbx3ay".
# ** Warning: (vsim-WLF-5001) Could not open WLF file: vsim.wlf
#           Using alternate file: ./wlftjbx3ay
# add wave -noupdate /Datapath_tb/IR
# add wave -noupdate /Datapath_tb/rdAddrA
# add wave -noupdate /Datapath_tb/rdAddrB
# add wave -noupdate /Datapath_tb/WriteAddr
# add wave -noupdate /Datapath_tb/D_addr
# add wave -noupdate /Datapath_tb/D_wr
# add wave -noupdate /Datapath_tb/RF_sel
# add wave -noupdate /Datapath_tb/RF_W_en
# add wave -noupdate /Datapath_tb/ALU_s0
# add wave -noupdate /Datapath_tb/ALU_A_out
# add wave -noupdate /Datapath_tb/DUT.Ra_data
# add wave -noupdate /Datapath_tb/ALU_B_out
# add wave -noupdate /Datapath_tb/DUT.Rb_data
# add wave -noupdate /Datapath_tb/ALUout
# add wave -noupdate /Datapath_tb/DUT.Wr_Data
# add wave -noupdate /Datapath_tb/DUT.Data_to_Mux
# 
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
#                    5 LOAD (A) 1111 in REG 1: 
#                    5   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 0
#                   20   NEGCLK: Load into REG 1 A | IR: 000000010001 | DataToMux: 0001000100010001 | write: 0 | wr data: 0001000100010001
#                   25 LOAD (B) 1111 in REG 1: 
#                   25   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 1
#                   40   NEGCLK: Load into REG 1 A | IR: 000000010001 | DataToMux: 0001000100010001 | write: 1 | wr data: 0001000100010001
#                   40   LOAD_1111 PASSED 
# 
#                   45 Store Operation 
#                   45   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 1 | RF_wrEn: 0
#                   60   NEGCLK: IR: 000101101010 | Wr Addr: 1010 
#                   60   STORE PASSED 
# 
#                   65 LOAD (A) 2222 in REG 2: 
#                   65   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 0
#                   80   NEGCLK: Load 2222 into REG 2 A | IR: 000000100010 | DataToMux: 0010001000100010 | write: 0 | wr data: 0010001000100010
#                   85 LOAD (B) 2222 in REG 2: 
#                   85   SELECT SIGNALS | ALU Sel: xxx | RF Sel: 1 | D_wr: 0 | RF_wrEn: 1
#                  100   NEGCLK: IR: 000000100010 | DataToMux: 0010001000100010 | write: 1 | wr data: 0010001000100010
#                  100   LOAD_2222 PASSED 
# 
#                  105 Add 1 Operation 
#                  105   SELECT SIGNALS | ALU Sel: 001 | RF Sel: 0 | D_wr: 0 | RF_wrEn: 1
#                  120   NEGCLK: Add Operation: Wr Addr = 0011 | A Addr = 0001 | B Addr = 0010
#                  120   ADD 1 PASSED 
# 
#                  125 Add 2 Operation 
#                  140   NEGCLK: Add Operation: Wr Addr = 0100 | A Addr = 0010 | B Addr = 0011
#                  140   ADD 2 PASSED 
# 
#                  145 Sub 1 Operation 
#                  145   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 0 | D_wr: 0 | RF_wrEn: 1
#                  160   NEGCLK: Sub Operation: Wr Addr = 0000 | A Addr = 0010 | B Addr = 0001
#                  160   SUB PASSED 
# 
#                  165 EDGE CASE LOAD Operation 
#                  165   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 1 | D_wr: 0 | RF_wrEn: 0
#                  180   NEGCLK: Load into REG 1 A | IR: 111111111111 | DataToMux: 1111111111111111 | write: 0 | wr data: 1111111111111111
#                  185   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 1 | D_wr: 0 | RF_wrEn: 1
#                  200   NEGCLK: Load into REG 1 A | IR: 111111111111 | DataToMux: 1111111111111111 | write: 1 | wr data: 1111111111111111
#                  200   EDGE CASE LOAD PASSED 
# 
#                  205 EDGE CASE Store Operation 
#                  205   SELECT SIGNALS | ALU Sel: 010 | RF Sel: 1 | D_wr: 1 | RF_wrEn: 0
#                  220   NEGCLK: IR: 111111111110 | Wr Addr: 1110 
#                  220   EDGE CASE STORE PASSED 
# 
#                  225 NO-OP Operation 
#                  225   SELECT SIGNALS | ALU Sel: 000 | RF Sel: 0 | D_wr: 0 | RF_wrEn: 0
#                  240   NEGCLK: IR: 111111111110 | Data Addr: 11111110 | A Addr: 1111
#                  245   NO-OP PASSED
# ** Note: $stop    : ./Datapath.sv(244)
#    Time: 245 ns  Iteration: 0  Instance: /Datapath_tb
# Break in Module Datapath_tb at ./Datapath.sv line 244
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 257250 ps
# 
# End
quit -sim
# End time: 16:29:00 on Jun 03,2023, Elapsed time: 0:05:25
# Errors: 0, Warnings: 2
cd C:/Users/Steven/Documents/GitHub/TCES330_Project/Processor
# reading modelsim.ini
do runrtlROM.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./InstructionMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:29:18 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./InstructionMemory.v 
# -- Compiling module InstructionMemory
# 
# Top level modules:
# 	InstructionMemory
# End time: 16:29:19 on Jun 03,2023, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# vlog -work work +acc "./IR.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:29:19 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./IR.sv 
# -- Compiling module IR
# -- Compiling module IR_tb
# 
# Top level modules:
# 	IR_tb
# End time: 16:29:19 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./FSM.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:29:19 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./FSM.sv 
# -- Compiling module FSM
# -- Compiling module FSM_tb
# 
# Top level modules:
# 	FSM_tb
# End time: 16:29:19 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./PC.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:29:19 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./PC.sv 
# -- Compiling module PC
# -- Compiling module PC_tb
# 
# Top level modules:
# 	PC_tb
# End time: 16:29:19 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ControlUnit.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:29:19 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./ControlUnit.sv 
# -- Compiling module ControlUnit
# -- Compiling module ControlUnit_tb
# 
# Top level modules:
# 	ControlUnit_tb
# End time: 16:29:19 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Datapath.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:29:19 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Datapath.sv 
# -- Compiling module Datapath
# -- Compiling module Datapath_tb
# 
# Top level modules:
# 	Datapath_tb
# End time: 16:29:19 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Mux_16w_2to1.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:29:19 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Mux_16w_2to1.sv 
# -- Compiling module Mux_16w_2to1
# -- Compiling module Mux_16w_2to1_tb
# 
# Top level modules:
# 	Mux_16w_2to1_tb
# End time: 16:29:19 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./regfile16x16a.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:29:19 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./regfile16x16a.sv 
# -- Compiling module regfile16x16a
# -- Compiling module regfile16x16a_tb
# 
# Top level modules:
# 	regfile16x16a_tb
# End time: 16:29:19 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ALU.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:29:19 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./ALU.sv 
# -- Compiling module ALU
# -- Compiling module ALU_tb
# 
# Top level modules:
# 	ALU_tb
# End time: 16:29:19 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./DataMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:29:19 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./DataMemory.v 
# -- Compiling module DataMemory
# 
# Top level modules:
# 	DataMemory
# End time: 16:29:19 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Processor.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:29:19 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Processor.sv 
# -- Compiling module Processor
# 
# Top level modules:
# 	Processor
# End time: 16:29:19 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./testProcessor.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:29:19 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./testProcessor.sv 
# -- Compiling module testProcessor
# 
# Top level modules:
# 	testProcessor
# End time: 16:29:19 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  testProcessor
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug testProcessor 
# Start time: 16:29:19 on Jun 03,2023
# Loading sv_std.std
# Loading work.testProcessor
# Loading work.Processor
# Loading work.ControlUnit
# Loading work.InstructionMemory
# Loading altera_mf_ver.altsyncram
# Loading work.IR
# Loading work.FSM
# Loading work.PC
# Loading work.Datapath
# Loading work.regfile16x16a
# Loading work.DataMemory
# Loading work.Mux_16w_2to1
# Loading work.ALU
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /testProcessor/Clk
# ** Warning: (vsim-WLF-5000) WLF file currently in use: vsim.wlf
#           File in use by: steve  Hostname: STEVE_LAPTOP  ProcessID: 40876
#           Attempting to use alternate WLF file "./wlfthz0ezr".
# ** Warning: (vsim-WLF-5001) Could not open WLF file: vsim.wlf
#           Using alternate file: ./wlfthz0ezr
# add wave -noupdate /testProcessor/Reset
# add wave -noupdate /testProcessor/IR_Out
# add wave -noupdate /testProcessor/PC_Out
# add wave -noupdate /testProcessor/State
# add wave -noupdate /testProcessor/nextState
# ** UI-Msg: (vish-4014) No objects found matching '/testProcessor/nextState'.
# Executing ONERROR command at macro ./wave.do line 8
# add wave -noupdate /testProcessor/ALU_A
# add wave -noupdate /testProcessor/ALU_B
# add wave -noupdate /testProcessor/ALU_Out
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
# 
# Begin Simulation.
# Time is 0 : Reset = 0   PC_Out = xx   IR_Out = xxxx  State = x  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 10000 : Reset = 0   PC_Out = xx   IR_Out = xxxx  State = 0  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 20000 : Reset = 1   PC_Out = xx   IR_Out = xxxx  State = 0  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 30000 : Reset = 1   PC_Out = 00   IR_Out = xxxx  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 50000 : Reset = 1   PC_Out = 01   IR_Out = xxxx  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 70000 : Reset = 1   PC_Out = 01   IR_Out = xxxx  State = 3  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 90000 : Reset = 1   PC_Out = 01   IR_Out = xxxx  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 110000 : Reset = 1   PC_Out = 02   IR_Out = 4abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 130000 : Reset = 1   PC_Out = 02   IR_Out = 4abc  State = 9  ALU A = xxxx  ALU B = xxxx ALU Out = xxxx
# Time is 150000 : Reset = 1   PC_Out = 02   IR_Out = 4abc  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 170000 : Reset = 1   PC_Out = 03   IR_Out = 2abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 190000 : Reset = 1   PC_Out = 03   IR_Out = 2abc  State = 4  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 210000 : Reset = 1   PC_Out = 03   IR_Out = 2abc  State = 5  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 230000 : Reset = 1   PC_Out = 03   IR_Out = 2abc  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 250000 : Reset = 1   PC_Out = 04   IR_Out = 1abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 270000 : Reset = 1   PC_Out = 04   IR_Out = 1abc  State = 6  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 290000 : Reset = 1   PC_Out = 04   IR_Out = 1abc  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 310000 : Reset = 1   PC_Out = 05   IR_Out = 0abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 330000 : Reset = 1   PC_Out = 05   IR_Out = 0abc  State = 3  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 350000 : Reset = 1   PC_Out = 05   IR_Out = 0abc  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 370000 : Reset = 1   PC_Out = 06   IR_Out = 5abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 390000 : Reset = 1   PC_Out = 06   IR_Out = 5abc  State = 8  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# A time value could not be extracted from the current line
# Break key hit
# Break in Module altsyncram_body at $MODEL_TECH/../altera/verilog/src/altera_mf.v line 49230
# Error opening C:/Users/Steven/Documents/GitHub/TCES330_Project/Processor/altera/verilog/src/altera_mf.v
# Path name 'C:/Users/Steven/Documents/GitHub/TCES330_Project/Processor/altera/verilog/src/altera_mf.v' doesn't exist.
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 88675450500 ps
# 
# End
do runrtlROM.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./InstructionMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:30:22 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./InstructionMemory.v 
# -- Compiling module InstructionMemory
# 
# Top level modules:
# 	InstructionMemory
# End time: 16:30:22 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./IR.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:30:22 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./IR.sv 
# -- Compiling module IR
# -- Compiling module IR_tb
# 
# Top level modules:
# 	IR_tb
# End time: 16:30:22 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./FSM.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:30:22 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./FSM.sv 
# -- Compiling module FSM
# -- Compiling module FSM_tb
# 
# Top level modules:
# 	FSM_tb
# End time: 16:30:22 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./PC.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:30:22 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./PC.sv 
# -- Compiling module PC
# -- Compiling module PC_tb
# 
# Top level modules:
# 	PC_tb
# End time: 16:30:22 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ControlUnit.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:30:22 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./ControlUnit.sv 
# -- Compiling module ControlUnit
# -- Compiling module ControlUnit_tb
# 
# Top level modules:
# 	ControlUnit_tb
# End time: 16:30:22 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Datapath.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:30:22 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Datapath.sv 
# -- Compiling module Datapath
# -- Compiling module Datapath_tb
# 
# Top level modules:
# 	Datapath_tb
# End time: 16:30:22 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Mux_16w_2to1.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:30:22 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Mux_16w_2to1.sv 
# -- Compiling module Mux_16w_2to1
# -- Compiling module Mux_16w_2to1_tb
# 
# Top level modules:
# 	Mux_16w_2to1_tb
# End time: 16:30:23 on Jun 03,2023, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# vlog -work work +acc "./regfile16x16a.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:30:23 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./regfile16x16a.sv 
# -- Compiling module regfile16x16a
# -- Compiling module regfile16x16a_tb
# 
# Top level modules:
# 	regfile16x16a_tb
# End time: 16:30:23 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ALU.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:30:23 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./ALU.sv 
# -- Compiling module ALU
# -- Compiling module ALU_tb
# 
# Top level modules:
# 	ALU_tb
# End time: 16:30:23 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./DataMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:30:23 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./DataMemory.v 
# -- Compiling module DataMemory
# 
# Top level modules:
# 	DataMemory
# End time: 16:30:23 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Processor.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:30:23 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./Processor.sv 
# -- Compiling module Processor
# 
# Top level modules:
# 	Processor
# End time: 16:30:23 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./testProcessor.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 16:30:23 on Jun 03,2023
# vlog -reportprogress 300 -work work "+acc" ./testProcessor.sv 
# -- Compiling module testProcessor
# 
# Top level modules:
# 	testProcessor
# End time: 16:30:23 on Jun 03,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  testProcessor
# End time: 16:30:25 on Jun 03,2023, Elapsed time: 0:01:06
# Errors: 0, Warnings: 2
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug testProcessor 
# Start time: 16:30:25 on Jun 03,2023
# Loading sv_std.std
# Loading work.testProcessor
# Loading work.Processor
# Loading work.ControlUnit
# Loading work.InstructionMemory
# Loading altera_mf_ver.altsyncram
# Loading work.IR
# Loading work.FSM
# Loading work.PC
# Loading work.Datapath
# Loading work.regfile16x16a
# Loading work.DataMemory
# Loading work.Mux_16w_2to1
# Loading work.ALU
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /testProcessor/Clk
# ** Warning: (vsim-WLF-5000) WLF file currently in use: vsim.wlf
#           File in use by: steve  Hostname: STEVE_LAPTOP  ProcessID: 40876
#           Attempting to use alternate WLF file "./wlftfneesr".
# ** Warning: (vsim-WLF-5001) Could not open WLF file: vsim.wlf
#           Using alternate file: ./wlftfneesr
# add wave -noupdate /testProcessor/Reset
# add wave -noupdate /testProcessor/IR_Out
# add wave -noupdate /testProcessor/PC_Out
# add wave -noupdate /testProcessor/State
# add wave -noupdate /testProcessor/nextState
# ** UI-Msg: (vish-4014) No objects found matching '/testProcessor/nextState'.
# Executing ONERROR command at macro ./wave.do line 8
# add wave -noupdate /testProcessor/ALU_A
# add wave -noupdate /testProcessor/ALU_B
# add wave -noupdate /testProcessor/ALU_Out
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
# 
# Begin Simulation.
# Time is 0 : Reset = 0   PC_Out = xx   IR_Out = xxxx  State = x  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 10000 : Reset = 0   PC_Out = xx   IR_Out = xxxx  State = 0  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 20000 : Reset = 1   PC_Out = xx   IR_Out = xxxx  State = 0  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 30000 : Reset = 1   PC_Out = 00   IR_Out = xxxx  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 50000 : Reset = 1   PC_Out = 01   IR_Out = xxxx  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 70000 : Reset = 1   PC_Out = 01   IR_Out = xxxx  State = 3  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 90000 : Reset = 1   PC_Out = 01   IR_Out = xxxx  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 110000 : Reset = 1   PC_Out = 02   IR_Out = 4abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 130000 : Reset = 1   PC_Out = 02   IR_Out = 4abc  State = 9  ALU A = xxxx  ALU B = xxxx ALU Out = xxxx
# Time is 150000 : Reset = 1   PC_Out = 02   IR_Out = 4abc  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 170000 : Reset = 1   PC_Out = 03   IR_Out = 2abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 190000 : Reset = 1   PC_Out = 03   IR_Out = 2abc  State = 4  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 210000 : Reset = 1   PC_Out = 03   IR_Out = 2abc  State = 5  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 230000 : Reset = 1   PC_Out = 03   IR_Out = 2abc  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 250000 : Reset = 1   PC_Out = 04   IR_Out = 1abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 270000 : Reset = 1   PC_Out = 04   IR_Out = 1abc  State = 6  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 290000 : Reset = 1   PC_Out = 04   IR_Out = 1abc  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 310000 : Reset = 1   PC_Out = 05   IR_Out = 0abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 330000 : Reset = 1   PC_Out = 05   IR_Out = 0abc  State = 3  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 350000 : Reset = 1   PC_Out = 05   IR_Out = 0abc  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 370000 : Reset = 1   PC_Out = 06   IR_Out = 5abc  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 390000 : Reset = 1   PC_Out = 06   IR_Out = 5abc  State = 8  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Break key hit
# Simulation stop requested.
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 423463519500 ps
# 
# End
quit -sim
# End time: 16:43:45 on Jun 03,2023, Elapsed time: 0:13:20
# Errors: 0, Warnings: 2
