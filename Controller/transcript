# Reading pref.tcl
# OpenFile C:/Users/Steven/Documents/GitHub/TCES330_Project/Controller/FSM.sv
do runrtlROM.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./InstructionMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:10:59 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./InstructionMemory.v 
# -- Compiling module InstructionMemory
# 
# Top level modules:
# 	InstructionMemory
# End time: 22:10:59 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./IR.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:10:59 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./IR.sv 
# -- Compiling module IR
# -- Compiling module IR_tb
# 
# Top level modules:
# 	IR_tb
# End time: 22:10:59 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./FSM.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:10:59 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./FSM.sv 
# -- Compiling module FSM
# -- Compiling module FSM_tb
# 
# Top level modules:
# 	FSM_tb
# End time: 22:10:59 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./PC.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:10:59 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./PC.sv 
# -- Compiling module PC
# -- Compiling module PC_tb
# 
# Top level modules:
# 	PC_tb
# End time: 22:10:59 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ControlUnit.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:10:59 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./ControlUnit.sv 
# -- Compiling module ControlUnit
# -- Compiling module ControlUnit_tb
# 
# Top level modules:
# 	ControlUnit_tb
# End time: 22:10:59 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  ControlUnit_tb
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug ControlUnit_tb 
# Start time: 22:10:59 on Jun 05,2023
# Loading sv_std.std
# Loading work.ControlUnit_tb
# Loading work.ControlUnit
# Loading work.InstructionMemory
# Loading altera_mf_ver.altsyncram
# Loading work.IR
# Loading work.FSM
# Loading work.PC
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /ControlUnit_tb/Clk
# add wave -noupdate /ControlUnit_tb/Reset
# add wave -noupdate /ControlUnit_tb/DUT.q
# add wave -noupdate /ControlUnit_tb/D_Wr
# add wave -noupdate /ControlUnit_tb/RF_W_en
# add wave -noupdate /ControlUnit_tb/RF_s
# add wave -noupdate /ControlUnit_tb/IR_Out
# add wave -noupdate /ControlUnit_tb/D_Addr
# add wave -noupdate /ControlUnit_tb/PC_Out
# add wave -noupdate /ControlUnit_tb/nextState
# add wave -noupdate /ControlUnit_tb/outState
# add wave -noupdate /ControlUnit_tb/RF_Ra_Addr
# add wave -noupdate /ControlUnit_tb/RF_Rb_Addr
# add wave -noupdate /ControlUnit_tb/RF_W_Addr
# add wave -noupdate /ControlUnit_tb/ALU_s0
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
#                    0   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0000 | outState: xxxx | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   10   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   11   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   30   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0001 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   50   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0010 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Error: Assertion error.
#    Time: 71 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 74
# ** Error: Assertion error.
#    Time: 131 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 78
# ** Error: Assertion error.
#    Time: 191 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 81
# ** Error: Assertion error.
#    Time: 211 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 84
# ** Error: Assertion error.
#    Time: 271 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 87
# ** Error: Assertion error.
#    Time: 331 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 90
# ** Error: Assertion error.
#    Time: 451 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 94
#                  451   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0010 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Note: $stop    : ./ControlUnit.sv(101)
#    Time: 456 ns  Iteration: 0  Instance: /ControlUnit_tb
# Break in Module ControlUnit_tb at ./ControlUnit.sv line 101
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 478800 ps
# 
# End
do runrtlROM.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# Error 31: Unable to unlink file "C:/Users/Steven/Documents/GitHub/TCES330_Project/Controller/rtl_work/_lib.qdb".
# Error 133: Unable to remove directory "C:/Users/Steven/Documents/GitHub/TCES330_Project/Controller/rtl_work".
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./InstructionMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:16:40 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./InstructionMemory.v 
# -- Compiling module InstructionMemory
# 
# Top level modules:
# 	InstructionMemory
# End time: 22:16:40 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./IR.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:16:40 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./IR.sv 
# -- Compiling module IR
# -- Compiling module IR_tb
# 
# Top level modules:
# 	IR_tb
# End time: 22:16:40 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./FSM.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:16:40 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./FSM.sv 
# -- Compiling module FSM
# -- Compiling module FSM_tb
# 
# Top level modules:
# 	FSM_tb
# End time: 22:16:40 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./PC.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:16:40 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./PC.sv 
# -- Compiling module PC
# -- Compiling module PC_tb
# 
# Top level modules:
# 	PC_tb
# End time: 22:16:40 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ControlUnit.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:16:40 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./ControlUnit.sv 
# -- Compiling module ControlUnit
# -- Compiling module ControlUnit_tb
# 
# Top level modules:
# 	ControlUnit_tb
# End time: 22:16:40 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  ControlUnit_tb
# End time: 22:16:42 on Jun 05,2023, Elapsed time: 0:05:43
# Errors: 7, Warnings: 0
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug ControlUnit_tb 
# Start time: 22:16:42 on Jun 05,2023
# Loading sv_std.std
# Loading work.ControlUnit_tb
# Loading work.ControlUnit
# Loading work.InstructionMemory
# Loading altera_mf_ver.altsyncram
# Loading work.IR
# Loading work.FSM
# Loading work.PC
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /ControlUnit_tb/Clk
# add wave -noupdate /ControlUnit_tb/Reset
# add wave -noupdate /ControlUnit_tb/DUT.q
# add wave -noupdate /ControlUnit_tb/D_Wr
# add wave -noupdate /ControlUnit_tb/RF_W_en
# add wave -noupdate /ControlUnit_tb/RF_s
# add wave -noupdate /ControlUnit_tb/IR_Out
# add wave -noupdate /ControlUnit_tb/D_Addr
# add wave -noupdate /ControlUnit_tb/PC_Out
# add wave -noupdate /ControlUnit_tb/nextState
# add wave -noupdate /ControlUnit_tb/outState
# add wave -noupdate /ControlUnit_tb/RF_Ra_Addr
# add wave -noupdate /ControlUnit_tb/RF_Rb_Addr
# add wave -noupdate /ControlUnit_tb/RF_W_Addr
# add wave -noupdate /ControlUnit_tb/ALU_s0
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
#                    0   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0000 | outState: xxxx | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   10   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   30   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   31   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   50   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0001 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   70   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0011101010111100 | nextState: 0111 | outState: 0010 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   90   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 001 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0011101010111100 | nextState: 0001 | outState: 0111 | PC_Out: 0000001 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 1011 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 0
#                   91   ADD PASSED
#                  110   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0011101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  130   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 1001 | outState: 0010 | PC_Out: 0000010 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  150   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 010 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0001 | outState: 1001 | PC_Out: 0000010 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 1011 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 0
#                  151   SUB PASSED
#                  170   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000010 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  190   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0100 | outState: 0010 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  210   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10101011 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0101 | outState: 0100 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 1100 | RF_W_en: 0 | RF_s: 1
#                  211   LOAD A PASSED
#                  230   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10101011 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0001 | outState: 0101 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 1
#                  231   LOAD B PASSED
#                  250   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  270   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0001101010111100 | nextState: 0110 | outState: 0010 | PC_Out: 0000100 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  290   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10111100 | D_wr: 1 | IR_Out: 0001101010111100 | nextState: 0001 | outState: 0110 | PC_Out: 0000100 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  291   STORE PASSED
#                  310   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0001101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000100 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  330   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0011 | outState: 0010 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  350   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0001 | outState: 0011 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  351   NO-OP PASSED
#                  370   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  390   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 0010 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  410   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 1000 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  471   HALF PASSED
#                  471   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 1000 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Note: $stop    : ./ControlUnit.sv(119)
#    Time: 476 ns  Iteration: 0  Instance: /ControlUnit_tb
# Break in Module ControlUnit_tb at ./ControlUnit.sv line 119
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 499800 ps
# 
# End
do runrtlROM.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./InstructionMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:18:32 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./InstructionMemory.v 
# -- Compiling module InstructionMemory
# 
# Top level modules:
# 	InstructionMemory
# End time: 22:18:32 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./IR.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:18:32 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./IR.sv 
# -- Compiling module IR
# -- Compiling module IR_tb
# 
# Top level modules:
# 	IR_tb
# End time: 22:18:32 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./FSM.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:18:32 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./FSM.sv 
# -- Compiling module FSM
# -- Compiling module FSM_tb
# 
# Top level modules:
# 	FSM_tb
# End time: 22:18:32 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./PC.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:18:32 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./PC.sv 
# -- Compiling module PC
# -- Compiling module PC_tb
# 
# Top level modules:
# 	PC_tb
# End time: 22:18:32 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ControlUnit.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:18:32 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./ControlUnit.sv 
# -- Compiling module ControlUnit
# -- Compiling module ControlUnit_tb
# 
# Top level modules:
# 	ControlUnit_tb
# End time: 22:18:32 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  ControlUnit_tb
# End time: 22:18:37 on Jun 05,2023, Elapsed time: 0:01:55
# Errors: 0, Warnings: 0
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug ControlUnit_tb 
# Start time: 22:18:37 on Jun 05,2023
# Loading sv_std.std
# Loading work.ControlUnit_tb
# Loading work.ControlUnit
# Loading work.InstructionMemory
# Loading altera_mf_ver.altsyncram
# Loading work.IR
# Loading work.FSM
# Loading work.PC
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /ControlUnit_tb/Clk
# add wave -noupdate /ControlUnit_tb/Reset
# add wave -noupdate /ControlUnit_tb/DUT.q
# add wave -noupdate /ControlUnit_tb/D_Wr
# add wave -noupdate /ControlUnit_tb/RF_W_en
# add wave -noupdate /ControlUnit_tb/RF_s
# add wave -noupdate /ControlUnit_tb/IR_Out
# add wave -noupdate /ControlUnit_tb/D_Addr
# add wave -noupdate /ControlUnit_tb/PC_Out
# add wave -noupdate /ControlUnit_tb/nextState
# add wave -noupdate /ControlUnit_tb/outState
# add wave -noupdate /ControlUnit_tb/RF_Ra_Addr
# add wave -noupdate /ControlUnit_tb/RF_Rb_Addr
# add wave -noupdate /ControlUnit_tb/RF_W_Addr
# add wave -noupdate /ControlUnit_tb/ALU_s0
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
#                    0   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0000 | outState: xxxx | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   10   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   20   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   30   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0001 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   50   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0010 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Error: Assertion error.
#    Time: 80 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 94
# ** Error: Assertion error.
#    Time: 140 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 98
# ** Error: Assertion error.
#    Time: 200 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 101
# ** Error: Assertion error.
#    Time: 220 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 104
# ** Error: Assertion error.
#    Time: 280 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 107
# ** Error: Assertion error.
#    Time: 340 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 110
# ** Error: Assertion error.
#    Time: 460 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 114
#                  460   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0010 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Note: $stop    : ./ControlUnit.sv(121)
#    Time: 465 ns  Iteration: 0  Instance: /ControlUnit_tb
# Break in Module ControlUnit_tb at ./ControlUnit.sv line 121
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 488250 ps
# 
# End
do runrtlROM.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./InstructionMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:24:52 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./InstructionMemory.v 
# -- Compiling module InstructionMemory
# 
# Top level modules:
# 	InstructionMemory
# End time: 22:24:52 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./IR.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:24:52 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./IR.sv 
# -- Compiling module IR
# -- Compiling module IR_tb
# 
# Top level modules:
# 	IR_tb
# End time: 22:24:52 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./FSM.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:24:52 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./FSM.sv 
# -- Compiling module FSM
# -- Compiling module FSM_tb
# 
# Top level modules:
# 	FSM_tb
# End time: 22:24:52 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./PC.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:24:52 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./PC.sv 
# -- Compiling module PC
# -- Compiling module PC_tb
# 
# Top level modules:
# 	PC_tb
# End time: 22:24:52 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ControlUnit.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:24:52 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./ControlUnit.sv 
# -- Compiling module ControlUnit
# -- Compiling module ControlUnit_tb
# 
# Top level modules:
# 	ControlUnit_tb
# End time: 22:24:52 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  ControlUnit_tb
# End time: 22:24:58 on Jun 05,2023, Elapsed time: 0:06:21
# Errors: 7, Warnings: 0
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug ControlUnit_tb 
# Start time: 22:24:58 on Jun 05,2023
# Loading sv_std.std
# Loading work.ControlUnit_tb
# Loading work.ControlUnit
# Loading work.InstructionMemory
# Loading altera_mf_ver.altsyncram
# Loading work.IR
# Loading work.FSM
# Loading work.PC
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /ControlUnit_tb/Clk
# add wave -noupdate /ControlUnit_tb/Reset
# add wave -noupdate /ControlUnit_tb/DUT.q
# add wave -noupdate /ControlUnit_tb/D_Wr
# add wave -noupdate /ControlUnit_tb/RF_W_en
# add wave -noupdate /ControlUnit_tb/RF_s
# add wave -noupdate /ControlUnit_tb/IR_Out
# add wave -noupdate /ControlUnit_tb/D_Addr
# add wave -noupdate /ControlUnit_tb/PC_Out
# add wave -noupdate /ControlUnit_tb/nextState
# add wave -noupdate /ControlUnit_tb/outState
# add wave -noupdate /ControlUnit_tb/RF_Ra_Addr
# add wave -noupdate /ControlUnit_tb/RF_Rb_Addr
# add wave -noupdate /ControlUnit_tb/RF_W_Addr
# add wave -noupdate /ControlUnit_tb/ALU_s0
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
#                    0   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0000 | outState: xxxx | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   10   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   20   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   30   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0001 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   50   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0000 | outState: 0010 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   70   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Error: Assertion error.
#    Time: 80 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 94
#                   90   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0001 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  110   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 1001 | outState: 0010 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  130   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 010 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0001 | outState: 1001 | PC_Out: 0000001 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 1011 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 0
#                  140   SUB PASSED
#                  150   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  170   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 1001 | outState: 0010 | PC_Out: 0000010 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  190   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 010 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0001 | outState: 1001 | PC_Out: 0000010 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 1011 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 0
# ** Error: Assertion error.
#    Time: 200 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 101
#                  210   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000010 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Error: Assertion error.
#    Time: 220 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 104
#                  230   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0100 | outState: 0010 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  250   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10101011 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0101 | outState: 0100 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 1100 | RF_W_en: 0 | RF_s: 1
#                  270   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10101011 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0001 | outState: 0101 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 1
# ** Error: Assertion error.
#    Time: 280 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 107
#                  290   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  310   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0001101010111100 | nextState: 0110 | outState: 0010 | PC_Out: 0000100 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  330   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10111100 | D_wr: 1 | IR_Out: 0001101010111100 | nextState: 0001 | outState: 0110 | PC_Out: 0000100 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Error: Assertion error.
#    Time: 340 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 110
#                  350   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0001101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000100 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  370   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0011 | outState: 0010 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  390   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0001 | outState: 0011 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  410   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  430   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 0010 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  450   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 1000 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  460   HALF PASSED
#                  460   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 1000 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Note: $stop    : ./ControlUnit.sv(121)
#    Time: 465 ns  Iteration: 0  Instance: /ControlUnit_tb
# Break in Module ControlUnit_tb at ./ControlUnit.sv line 121
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 488250 ps
# 
# End
do runrtlROM.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./InstructionMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:25:56 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./InstructionMemory.v 
# -- Compiling module InstructionMemory
# 
# Top level modules:
# 	InstructionMemory
# End time: 22:25:56 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./IR.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:25:56 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./IR.sv 
# -- Compiling module IR
# -- Compiling module IR_tb
# 
# Top level modules:
# 	IR_tb
# End time: 22:25:56 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./FSM.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:25:56 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./FSM.sv 
# -- Compiling module FSM
# -- Compiling module FSM_tb
# 
# Top level modules:
# 	FSM_tb
# End time: 22:25:56 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./PC.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:25:56 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./PC.sv 
# -- Compiling module PC
# -- Compiling module PC_tb
# 
# Top level modules:
# 	PC_tb
# End time: 22:25:56 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ControlUnit.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:25:57 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./ControlUnit.sv 
# -- Compiling module ControlUnit
# -- Compiling module ControlUnit_tb
# 
# Top level modules:
# 	ControlUnit_tb
# End time: 22:25:57 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  ControlUnit_tb
# End time: 22:25:58 on Jun 05,2023, Elapsed time: 0:01:00
# Errors: 5, Warnings: 0
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug ControlUnit_tb 
# Start time: 22:25:58 on Jun 05,2023
# Loading sv_std.std
# Loading work.ControlUnit_tb
# Loading work.ControlUnit
# Loading work.InstructionMemory
# Loading altera_mf_ver.altsyncram
# Loading work.IR
# Loading work.FSM
# Loading work.PC
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /ControlUnit_tb/Clk
# add wave -noupdate /ControlUnit_tb/Reset
# add wave -noupdate /ControlUnit_tb/DUT.q
# add wave -noupdate /ControlUnit_tb/D_Wr
# add wave -noupdate /ControlUnit_tb/RF_W_en
# add wave -noupdate /ControlUnit_tb/RF_s
# add wave -noupdate /ControlUnit_tb/IR_Out
# add wave -noupdate /ControlUnit_tb/D_Addr
# add wave -noupdate /ControlUnit_tb/PC_Out
# add wave -noupdate /ControlUnit_tb/nextState
# add wave -noupdate /ControlUnit_tb/outState
# add wave -noupdate /ControlUnit_tb/RF_Ra_Addr
# add wave -noupdate /ControlUnit_tb/RF_Rb_Addr
# add wave -noupdate /ControlUnit_tb/RF_W_Addr
# add wave -noupdate /ControlUnit_tb/ALU_s0
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
#                    0   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0000 | outState: xxxx | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   10   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   20   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   30   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0001 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   50   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0011 | outState: 0010 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   70   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0011 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Error: Assertion error.
#    Time: 80 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 94
#                   90   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0001 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  110   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 1001 | outState: 0010 | PC_Out: 0000010 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  130   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 010 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0001 | outState: 1001 | PC_Out: 0000010 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 1011 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 0
#                  140   SUB PASSED
#                  150   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000010 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  170   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0100 | outState: 0010 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  190   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10101011 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0101 | outState: 0100 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 1100 | RF_W_en: 0 | RF_s: 1
#                  200   LOAD A PASSED
#                  210   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10101011 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0001 | outState: 0101 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 1
#                  220   LOAD B PASSED
#                  230   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  250   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0001101010111100 | nextState: 0110 | outState: 0010 | PC_Out: 0000100 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  270   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10111100 | D_wr: 1 | IR_Out: 0001101010111100 | nextState: 0001 | outState: 0110 | PC_Out: 0000100 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  280   STORE PASSED
#                  290   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0001101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000100 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  310   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0011 | outState: 0010 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  330   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0001 | outState: 0011 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  340   NO-OP PASSED
#                  350   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  370   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 0010 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  390   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 1000 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  460   HALF PASSED
#                  460   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 1000 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Note: $stop    : ./ControlUnit.sv(121)
#    Time: 465 ns  Iteration: 0  Instance: /ControlUnit_tb
# Break in Module ControlUnit_tb at ./ControlUnit.sv line 121
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 488250 ps
# 
# End
do runrtlROM.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./InstructionMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:51:37 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./InstructionMemory.v 
# -- Compiling module InstructionMemory
# 
# Top level modules:
# 	InstructionMemory
# End time: 22:51:37 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./IR.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:51:37 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./IR.sv 
# -- Compiling module IR
# -- Compiling module IR_tb
# 
# Top level modules:
# 	IR_tb
# End time: 22:51:37 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./FSM.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:51:37 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./FSM.sv 
# -- Compiling module FSM
# -- Compiling module FSM_tb
# 
# Top level modules:
# 	FSM_tb
# End time: 22:51:37 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./PC.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:51:37 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./PC.sv 
# -- Compiling module PC
# -- Compiling module PC_tb
# 
# Top level modules:
# 	PC_tb
# End time: 22:51:38 on Jun 05,2023, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ControlUnit.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:51:38 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./ControlUnit.sv 
# -- Compiling module ControlUnit
# -- Compiling module ControlUnit_tb
# 
# Top level modules:
# 	ControlUnit_tb
# End time: 22:51:38 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  ControlUnit_tb
# End time: 22:51:39 on Jun 05,2023, Elapsed time: 0:25:41
# Errors: 1, Warnings: 0
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug ControlUnit_tb 
# Start time: 22:51:39 on Jun 05,2023
# Loading sv_std.std
# Loading work.ControlUnit_tb
# Loading work.ControlUnit
# Loading work.InstructionMemory
# Loading altera_mf_ver.altsyncram
# Loading work.IR
# Loading work.FSM
# Loading work.PC
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /ControlUnit_tb/Clk
# add wave -noupdate /ControlUnit_tb/Reset
# add wave -noupdate /ControlUnit_tb/DUT.q
# add wave -noupdate /ControlUnit_tb/D_Wr
# add wave -noupdate /ControlUnit_tb/RF_W_en
# add wave -noupdate /ControlUnit_tb/RF_s
# add wave -noupdate /ControlUnit_tb/IR_Out
# add wave -noupdate /ControlUnit_tb/D_Addr
# add wave -noupdate /ControlUnit_tb/PC_Out
# add wave -noupdate /ControlUnit_tb/nextState
# add wave -noupdate /ControlUnit_tb/outState
# add wave -noupdate /ControlUnit_tb/RF_Ra_Addr
# add wave -noupdate /ControlUnit_tb/RF_Rb_Addr
# add wave -noupdate /ControlUnit_tb/RF_W_Addr
# add wave -noupdate /ControlUnit_tb/ALU_s0
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
#                    0   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0000 | outState: xxxx | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   10   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   20   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   30   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0001 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   50   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0000 | outState: 0010 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   70   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   90   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0001 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Error: Assertion error.
#    Time: 110 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 94
#                  110   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 1001 | outState: 0010 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  130   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 010 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0001 | outState: 1001 | PC_Out: 0000001 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 1011 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 0
#                  150   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Error: Assertion error.
#    Time: 170 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 98
#                  170   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 1001 | outState: 0010 | PC_Out: 0000010 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  190   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 010 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0001 | outState: 1001 | PC_Out: 0000010 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 1011 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 0
#                  210   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000010 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Error: Assertion error.
#    Time: 230 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 101
#                  230   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0100 | outState: 0010 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Error: Assertion error.
#    Time: 250 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 104
#                  250   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10101011 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0101 | outState: 0100 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 1100 | RF_W_en: 0 | RF_s: 1
#                  270   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10101011 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0001 | outState: 0101 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 1
#                  290   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Error: Assertion error.
#    Time: 310 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 107
#                  310   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0001101010111100 | nextState: 0110 | outState: 0010 | PC_Out: 0000100 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  330   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10111100 | D_wr: 1 | IR_Out: 0001101010111100 | nextState: 0001 | outState: 0110 | PC_Out: 0000100 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  350   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0001101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000100 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Error: Assertion error.
#    Time: 370 ns  Scope: ControlUnit_tb File: ./ControlUnit.sv Line: 110
#                  370   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0011 | outState: 0010 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  390   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0001 | outState: 0011 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  410   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  430   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 0010 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  450   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 1000 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  490   HALF PASSED
#                  490   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 1000 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Note: $stop    : ./ControlUnit.sv(121)
#    Time: 495 ns  Iteration: 0  Instance: /ControlUnit_tb
# Break in Module ControlUnit_tb at ./ControlUnit.sv line 121
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 519750 ps
# 
# End
do runrtlROM.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./InstructionMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:53:09 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./InstructionMemory.v 
# -- Compiling module InstructionMemory
# 
# Top level modules:
# 	InstructionMemory
# End time: 22:53:10 on Jun 05,2023, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# vlog -work work +acc "./IR.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:53:10 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./IR.sv 
# -- Compiling module IR
# -- Compiling module IR_tb
# 
# Top level modules:
# 	IR_tb
# End time: 22:53:10 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./FSM.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:53:10 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./FSM.sv 
# -- Compiling module FSM
# -- Compiling module FSM_tb
# 
# Top level modules:
# 	FSM_tb
# End time: 22:53:10 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./PC.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:53:10 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./PC.sv 
# -- Compiling module PC
# -- Compiling module PC_tb
# 
# Top level modules:
# 	PC_tb
# End time: 22:53:10 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ControlUnit.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:53:10 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./ControlUnit.sv 
# -- Compiling module ControlUnit
# -- Compiling module ControlUnit_tb
# 
# Top level modules:
# 	ControlUnit_tb
# End time: 22:53:10 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  ControlUnit_tb
# End time: 22:53:12 on Jun 05,2023, Elapsed time: 0:01:33
# Errors: 6, Warnings: 0
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug ControlUnit_tb 
# Start time: 22:53:12 on Jun 05,2023
# Loading sv_std.std
# Loading work.ControlUnit_tb
# Loading work.ControlUnit
# Loading work.InstructionMemory
# Loading altera_mf_ver.altsyncram
# Loading work.IR
# Loading work.FSM
# Loading work.PC
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /ControlUnit_tb/Clk
# add wave -noupdate /ControlUnit_tb/Reset
# add wave -noupdate /ControlUnit_tb/DUT.q
# add wave -noupdate /ControlUnit_tb/D_Wr
# add wave -noupdate /ControlUnit_tb/RF_W_en
# add wave -noupdate /ControlUnit_tb/RF_s
# add wave -noupdate /ControlUnit_tb/IR_Out
# add wave -noupdate /ControlUnit_tb/D_Addr
# add wave -noupdate /ControlUnit_tb/PC_Out
# add wave -noupdate /ControlUnit_tb/nextState
# add wave -noupdate /ControlUnit_tb/outState
# add wave -noupdate /ControlUnit_tb/RF_Ra_Addr
# add wave -noupdate /ControlUnit_tb/RF_Rb_Addr
# add wave -noupdate /ControlUnit_tb/RF_W_Addr
# add wave -noupdate /ControlUnit_tb/ALU_s0
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
#                    0   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0000 | outState: xxxx | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   10   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   30   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   31   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   50   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0001 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   70   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0011101010111100 | nextState: 0111 | outState: 0010 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   90   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 001 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0011101010111100 | nextState: 0001 | outState: 0111 | PC_Out: 0000001 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 1011 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 0
#                   91   ADD PASSED
#                  110   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0011101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  130   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 1001 | outState: 0010 | PC_Out: 0000010 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  150   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 010 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0001 | outState: 1001 | PC_Out: 0000010 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 1011 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 0
#                  151   SUB PASSED
#                  170   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000010 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  190   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0100 | outState: 0010 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  210   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10101011 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0101 | outState: 0100 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 1100 | RF_W_en: 0 | RF_s: 1
#                  211   LOAD A PASSED
#                  230   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10101011 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0001 | outState: 0101 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 1
#                  231   LOAD B PASSED
#                  250   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  270   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0001101010111100 | nextState: 0110 | outState: 0010 | PC_Out: 0000100 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  290   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10111100 | D_wr: 1 | IR_Out: 0001101010111100 | nextState: 0001 | outState: 0110 | PC_Out: 0000100 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  291   STORE PASSED
#                  310   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0001101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000100 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  330   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0011 | outState: 0010 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  350   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0001 | outState: 0011 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  351   NO-OP PASSED
#                  370   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  390   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 0010 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  410   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 1000 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  471   HALF PASSED
#                  471   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 1000 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Note: $stop    : ./ControlUnit.sv(120)
#    Time: 476 ns  Iteration: 0  Instance: /ControlUnit_tb
# Break in Module ControlUnit_tb at ./ControlUnit.sv line 120
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 499800 ps
# 
# End
# WARNING: No extended dataflow license exists
do runrtlROM.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# Error 31: Unable to unlink file "C:/Users/Steven/Documents/GitHub/TCES330_Project/Controller/rtl_work/_lib.qdb".
# Error 31: Unable to unlink file "C:/Users/Steven/Documents/GitHub/TCES330_Project/Controller/rtl_work/_lib1_0.qdb".
# Error 31: Unable to unlink file "C:/Users/Steven/Documents/GitHub/TCES330_Project/Controller/rtl_work/_lib1_0.qpg".
# Error 31: Unable to unlink file "C:/Users/Steven/Documents/GitHub/TCES330_Project/Controller/rtl_work/_lib1_0.qtl".
# Error 133: Unable to remove directory "C:/Users/Steven/Documents/GitHub/TCES330_Project/Controller/rtl_work".
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./InstructionMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:55:39 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./InstructionMemory.v 
# -- Compiling module InstructionMemory
# 
# Top level modules:
# 	InstructionMemory
# End time: 22:55:39 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./IR.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:55:39 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./IR.sv 
# -- Compiling module IR
# -- Compiling module IR_tb
# 
# Top level modules:
# 	IR_tb
# End time: 22:55:39 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./FSM.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:55:39 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./FSM.sv 
# -- Compiling module FSM
# -- Compiling module FSM_tb
# 
# Top level modules:
# 	FSM_tb
# End time: 22:55:39 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./PC.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:55:39 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./PC.sv 
# -- Compiling module PC
# -- Compiling module PC_tb
# 
# Top level modules:
# 	PC_tb
# End time: 22:55:39 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ControlUnit.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:55:39 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./ControlUnit.sv 
# -- Compiling module ControlUnit
# -- Compiling module ControlUnit_tb
# 
# Top level modules:
# 	ControlUnit_tb
# End time: 22:55:40 on Jun 05,2023, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  ControlUnit_tb
# End time: 22:55:44 on Jun 05,2023, Elapsed time: 0:02:32
# Errors: 0, Warnings: 0
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug ControlUnit_tb 
# Start time: 22:55:44 on Jun 05,2023
# Loading sv_std.std
# Loading work.ControlUnit_tb
# Loading work.ControlUnit
# Loading work.InstructionMemory
# Loading altera_mf_ver.altsyncram
# Loading work.IR
# Loading work.FSM
# Loading work.PC
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /ControlUnit_tb/Clk
# add wave -noupdate /ControlUnit_tb/Reset
# add wave -noupdate /ControlUnit_tb/DUT.q
# add wave -noupdate /ControlUnit_tb/D_Wr
# add wave -noupdate /ControlUnit_tb/RF_W_en
# add wave -noupdate /ControlUnit_tb/RF_s
# add wave -noupdate /ControlUnit_tb/IR_Out
# add wave -noupdate /ControlUnit_tb/D_Addr
# add wave -noupdate /ControlUnit_tb/PC_Out
# add wave -noupdate /ControlUnit_tb/nextState
# add wave -noupdate /ControlUnit_tb/outState
# add wave -noupdate /ControlUnit_tb/RF_Ra_Addr
# add wave -noupdate /ControlUnit_tb/RF_Rb_Addr
# add wave -noupdate /ControlUnit_tb/RF_W_Addr
# add wave -noupdate /ControlUnit_tb/ALU_s0
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
#                    0   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0000 | outState: xxxx | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   10   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: xxxxxxx | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   30   Reset: 0 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   31   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0001 | outState: 0000 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   50   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: xxxxxxxxxxxxxxxx | nextState: 0010 | outState: 0001 | PC_Out: 0000000 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   70   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0011101010111100 | nextState: 0111 | outState: 0010 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                   90   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 001 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0011101010111100 | nextState: 0001 | outState: 0111 | PC_Out: 0000001 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 1011 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 0
#                   91   ADD PASSED
#                  110   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0011101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000001 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  130   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 1001 | outState: 0010 | PC_Out: 0000010 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  150   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 010 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0001 | outState: 1001 | PC_Out: 0000010 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 1011 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 0
#                  151   SUB PASSED
#                  170   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0100101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000010 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  190   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0100 | outState: 0010 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  210   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10101011 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0101 | outState: 0100 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 1100 | RF_W_en: 0 | RF_s: 1
#                  211   LOAD A PASSED
#                  230   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10101011 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0001 | outState: 0101 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 1100 | RF_W_en: 1 | RF_s: 1
#                  231   LOAD B PASSED
#                  250   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0010101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000011 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  270   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0001101010111100 | nextState: 0110 | outState: 0010 | PC_Out: 0000100 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  290   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 10111100 | D_wr: 1 | IR_Out: 0001101010111100 | nextState: 0001 | outState: 0110 | PC_Out: 0000100 | RF_Ra_Addr: 1010 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  291   STORE PASSED
#                  310   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0001101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000100 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  330   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0011 | outState: 0010 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  350   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0001 | outState: 0011 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  351   NO-OP PASSED
#                  370   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0000101010111100 | nextState: 0010 | outState: 0001 | PC_Out: 0000101 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  390   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 0010 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  410   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 1000 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
#                  471   HALF PASSED
#                  471   Reset: 1 | OUTPUT SIGNALS: ALU Sel: 000 | D_Addr: 00000000 | D_wr: 0 | IR_Out: 0101101010111100 | nextState: 1000 | outState: 1000 | PC_Out: 0000110 | RF_Ra_Addr: 0000 | RF_Rb_Addr: 0000 | RF_W_Addr: 0000 | RF_W_en: 0 | RF_s: 0
# ** Note: $stop    : ./ControlUnit.sv(120)
#    Time: 476 ns  Iteration: 0  Instance: /ControlUnit_tb
# Break in Module ControlUnit_tb at ./ControlUnit.sv line 120
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 499800 ps
# 
# End
quit -sim
# End time: 22:56:11 on Jun 05,2023, Elapsed time: 0:00:27
# Errors: 0, Warnings: 0
cd C:/Users/Steven/Documents/GitHub/TCES330_Project/Processor
# reading modelsim.ini
do runrtlROM.do
# 
# Get rid of current work lib
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# 
# Create work library and map it to 'work'
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# Compile Verilog
#     All Verilog files that are part of this design should have
#     their own "vlog" line below.
# vlog -work work +acc "./InstructionMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:58:43 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./InstructionMemory.v 
# -- Compiling module InstructionMemory
# 
# Top level modules:
# 	InstructionMemory
# End time: 22:58:43 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./IR.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:58:43 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./IR.sv 
# -- Compiling module IR
# -- Compiling module IR_tb
# 
# Top level modules:
# 	IR_tb
# End time: 22:58:43 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./FSM.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:58:43 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./FSM.sv 
# -- Compiling module FSM
# -- Compiling module FSM_tb
# 
# Top level modules:
# 	FSM_tb
# End time: 22:58:43 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./PC.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:58:43 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./PC.sv 
# -- Compiling module PC
# -- Compiling module PC_tb
# 
# Top level modules:
# 	PC_tb
# End time: 22:58:43 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ControlUnit.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:58:43 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./ControlUnit.sv 
# -- Compiling module ControlUnit
# -- Compiling module ControlUnit_tb
# 
# Top level modules:
# 	ControlUnit_tb
# End time: 22:58:43 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Datapath.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:58:43 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./Datapath.sv 
# -- Compiling module Datapath
# -- Compiling module Datapath_tb
# 
# Top level modules:
# 	Datapath_tb
# End time: 22:58:43 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Mux_16w_2to1.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:58:43 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./Mux_16w_2to1.sv 
# -- Compiling module Mux_16w_2to1
# -- Compiling module Mux_16w_2to1_tb
# 
# Top level modules:
# 	Mux_16w_2to1_tb
# End time: 22:58:43 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./regfile16x16a.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:58:43 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./regfile16x16a.sv 
# -- Compiling module regfile16x16a
# -- Compiling module regfile16x16a_tb
# 
# Top level modules:
# 	regfile16x16a_tb
# End time: 22:58:43 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./ALU.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:58:43 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./ALU.sv 
# -- Compiling module ALU
# -- Compiling module ALU_tb
# 
# Top level modules:
# 	ALU_tb
# End time: 22:58:43 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./DataMemory.v"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:58:43 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./DataMemory.v 
# -- Compiling module DataMemory
# 
# Top level modules:
# 	DataMemory
# End time: 22:58:43 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./Processor.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:58:43 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./Processor.sv 
# -- Compiling module Processor
# 
# Top level modules:
# 	Processor
# End time: 22:58:43 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -work work +acc "./testProcessor.sv"
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 22:58:43 on Jun 05,2023
# vlog -reportprogress 300 -work work "+acc" ./testProcessor.sv 
# -- Compiling module testProcessor
# 
# Top level modules:
# 	testProcessor
# End time: 22:58:43 on Jun 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# 
# Call vsim to invoke simulator
#     Make sure the last item on the line is the name of the
#     testbench module you want to execute.
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc" -fsmdebug  testProcessor
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" -fsmdebug testProcessor 
# Start time: 22:58:44 on Jun 05,2023
# Loading sv_std.std
# Loading work.testProcessor
# Loading work.Processor
# Loading work.ControlUnit
# Loading work.InstructionMemory
# Loading altera_mf_ver.altsyncram
# Loading work.IR
# Loading work.FSM
# Loading work.PC
# Loading work.Datapath
# Loading work.regfile16x16a
# Loading work.DataMemory
# Loading work.Mux_16w_2to1
# Loading work.ALU
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# 
# Source the wave do file
#     This should be the file that sets up the signal window for
#     the module you are testing.
# do wave.do
# onerror {resume}
# quietly WaveActivateNextPane {} 0
# add wave -noupdate /testProcessor/Clk
# add wave -noupdate /testProcessor/Reset
# add wave -noupdate /testProcessor/IR_Out
# add wave -noupdate /testProcessor/PC_Out
# add wave -noupdate /testProcessor/State
# add wave -noupdate /testProcessor/nextState
# ** UI-Msg: (vish-4014) No objects found matching '/testProcessor/nextState'.
# Executing ONERROR command at macro ./wave.do line 8
# add wave -noupdate /testProcessor/ALU_A
# add wave -noupdate /testProcessor/ALU_B
# add wave -noupdate /testProcessor/ALU_Out
# TreeUpdate [SetDefaultTree]
# WaveRestoreCursors {{Cursor 1} {0 ps} 0}
# quietly wave cursor active 0
# configure wave -namecolwidth 150
# configure wave -valuecolwidth 100
# configure wave -justifyvalue left
# configure wave -signalnamewidth 0
# configure wave -snapdistance 10
# configure wave -datasetprefix 0
# configure wave -rowmargin 4
# configure wave -childrowmargin 2
# configure wave -gridoffset 0
# configure wave -gridperiod 1
# configure wave -griddelta 40
# configure wave -timeline 0
# configure wave -timelineunits ps
# update
# WaveRestoreZoom {0 ps} {1 ns}
# 
# Set the window types
# view wave
# .main_pane.wave.interior.cs.body.pw.wf
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# 
# Run the simulation
# run -all
# 
# Begin Simulation.
# Time is 0 : Reset = 0   PC_Out = xx   IR_Out = xxxx  State = x  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 10000 : Reset = 0   PC_Out = xx   IR_Out = xxxx  State = 0  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 30000 : Reset = 0   PC_Out = 00   IR_Out = xxxx  State = 0  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 41000 : Reset = 1   PC_Out = 00   IR_Out = xxxx  State = 0  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 50000 : Reset = 1   PC_Out = 00   IR_Out = xxxx  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 70000 : Reset = 1   PC_Out = 01   IR_Out = 21b1  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 90000 : Reset = 1   PC_Out = 01   IR_Out = 21b1  State = 4  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 110000 : Reset = 1   PC_Out = 01   IR_Out = 21b1  State = 5  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 130000 : Reset = 1   PC_Out = 01   IR_Out = 21b1  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 150000 : Reset = 1   PC_Out = 02   IR_Out = 22a2  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 170000 : Reset = 1   PC_Out = 02   IR_Out = 22a2  State = 4  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 190000 : Reset = 1   PC_Out = 02   IR_Out = 22a2  State = 5  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 210000 : Reset = 1   PC_Out = 02   IR_Out = 22a2  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 230000 : Reset = 1   PC_Out = 03   IR_Out = 23c3  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 250000 : Reset = 1   PC_Out = 03   IR_Out = 23c3  State = 4  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 270000 : Reset = 1   PC_Out = 03   IR_Out = 23c3  State = 5  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 290000 : Reset = 1   PC_Out = 03   IR_Out = 23c3  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 310000 : Reset = 1   PC_Out = 04   IR_Out = 27e4  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 330000 : Reset = 1   PC_Out = 04   IR_Out = 27e4  State = 4  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 350000 : Reset = 1   PC_Out = 04   IR_Out = 27e4  State = 5  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 370000 : Reset = 1   PC_Out = 04   IR_Out = 27e4  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 390000 : Reset = 1   PC_Out = 05   IR_Out = 4125  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 410000 : Reset = 1   PC_Out = 05   IR_Out = 4125  State = 9  ALU A = 21ba  ALU B = a04e ALU Out = 816c
# Time is 430000 : Reset = 1   PC_Out = 05   IR_Out = 4125  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 450000 : Reset = 1   PC_Out = 06   IR_Out = 3536  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 470000 : Reset = 1   PC_Out = 06   IR_Out = 3536  State = 7  ALU A = 816c  ALU B = 71ac ALU Out = f318
# Time is 490000 : Reset = 1   PC_Out = 06   IR_Out = 3536  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 510000 : Reset = 1   PC_Out = 07   IR_Out = 464a  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 530000 : Reset = 1   PC_Out = 07   IR_Out = 464a  State = 9  ALU A = f318  ALU B = b17f ALU Out = 4199
# Time is 550000 : Reset = 1   PC_Out = 07   IR_Out = 464a  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 570000 : Reset = 1   PC_Out = 08   IR_Out = 1a6a  State = 2  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# Time is 590000 : Reset = 1   PC_Out = 08   IR_Out = 1a6a  State = 6  ALU A = 4199  ALU B = xxxx ALU Out = 0000
# Time is 610000 : Reset = 1   PC_Out = 08   IR_Out = 1a6a  State = 1  ALU A = xxxx  ALU B = xxxx ALU Out = 0000
# 
# End of Simulation.
# 
# ** Note: $stop    : ./testProcessor.sv(32)
#    Time: 630 ns  Iteration: 2  Instance: /testProcessor
# Break in Module testProcessor at ./testProcessor.sv line 32
# 
# View the entire wave display
# wave zoomfull
# 0 ps
# 661500 ps
# 
# End
